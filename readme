Overview
This project provides a secure messaging client implementation using modern cryptographic techniques. The MessengerClient class allows users to generate certificates, exchange public keys, and securely send and receive messages with end-to-end encryption and forward secrecy.

Features
Key Generation: Generates public/private key pairs for users using Elliptic Curve Diffie-Hellman (ECDH).
Certificate Management: Manages certificates issued by a certificate authority to ensure authenticity.
Message Encryption: Encrypts messages using AES-GCM for confidentiality and integrity.
Forward Secrecy: Implements the Double Ratchet algorithm to ensure that past communication remains secure even if future keys are compromised.
Prerequisites
Node.js (v14.0.0 or later)
Required cryptographic functions are provided in lib.js.
Installation
Clone the repository:

git clone <repository_url>
cd <repository_directory>
Install dependencies:

npm install
Usage

Creating a Messenger Client
To create a MessengerClient instance, you need the public keys of the certificate authority and the government:


const { MessengerClient } = require('./path_to_messenger_client');
const certAuthorityPublicKey = 'your_cert_authority_public_key';
const govPublicKey = 'your_gov_public_key';

const client = new MessengerClient(certAuthorityPublicKey, govPublicKey);

Generating a Certificate
Each user must generate a certificate to be verified and stored by the certificate authority:

const username = 'your_username';
const certificate = await client.generateCertificate(username);
// Send this certificate to the certificate authority for signing.
Receiving a Certificate
When you receive another user's certificate, verify its authenticity:


const receivedCertificate = {}; // The certificate object received from the user
const signature = 'signature_from_cert_authority';

await client.receiveCertificate(receivedCertificate, signature);
Sending a Message

To send a secure message to another user:

const recipientUsername = 'recipient_username';
const plaintextMessage = 'Hello, this is a secure message.';

const [header, ciphertext] = await client.sendMessage(recipientUsername, plaintextMessage);
// Send the [header, ciphertext] to the recipient
Receiving a Message

To receive and decrypt a message from another user:

const senderUsername = 'sender_username';
const receivedHeader = {}; // The header received from the sender
const receivedCiphertext = 'ciphertext_from_sender';

const plaintext = await client.receiveMessage(senderUsername, [receivedHeader, receivedCiphertext]);
console.log('Decrypted message:', plaintext);
File Structure
messengerClient.js: Contains the implementation of the MessengerClient class.
lib.js: Contains cryptographic helper functions used by the MessengerClient.
